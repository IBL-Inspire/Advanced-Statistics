[["data.html", "Day 4 Data 4.1 Data Inspection, Manipulation &amp; Visualization 4.2 Draw a Map of COVID-19 Cases 4.3 Exercise (medium)", " Day 4 Data Lecture: Data inspection &amp; manipulation Practical: Draw a map of COVID-19 cases with ggplot2 4.1 Data Inspection, Manipulation &amp; Visualization [video to be included] 4.2 Draw a Map of COVID-19 Cases Can you plot the number of COVID-19 infections across the world on a specific day using just plot, lines, points, text and polygon? Of course but it would probably take a very long time. If you install the following specialized packages: install.packages(&quot;COVID19&quot;) install.packages(&quot;ggplot2&quot;) install.packages(&quot;rgeos&quot;) install.packages(&quot;rnaturalearth&quot;) install.packages(&quot;rnaturalearthdata&quot;) install.packages(&quot;sf&quot;) Here is how you could do that with ggplot2: # Load package required for easy access to COVID-19 data library(&quot;COVID19&quot;) # Load packages required for easy access to Earth data library(&quot;rnaturalearth&quot;) library(&quot;rnaturalearthdata&quot;) library(&quot;sf&quot;) # Load ggplot2 and set background to white library(&quot;ggplot2&quot;) theme_set(theme_bw()) # Load Earth data from rnaturalearthdata package Earth &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) # Load COVID-19 data for a specific date COVID19 &lt;- covid19() maxc &lt;- max(COVID19$confirmed, na.rm = TRUE) # maximum number of cases date &lt;- &quot;2021-06-30&quot; Cases &lt;- COVID19[COVID19$date == date, ] # Data cleaning countries &lt;- Cases$administrative_area_level_1 countries[countries == &quot;United States&quot;] &lt;- &quot;United States of America&quot; countries[countries == &quot;Korea, South&quot;] &lt;- &quot;South Korea&quot; countries[countries == &quot;Cote d&#39;Ivoire&quot;] &lt;- &quot;Ivory Coast&quot; # Match the confirmed cases to the list of countries in the Earth data wh &lt;- match(Earth$admin, countries) Earth$Cases &lt;- Cases$confirmed[wh] # Plot the data ggplot(data = Earth) + geom_sf(aes(fill = Cases)) + scale_fill_viridis_c(limits = c(0, maxc), option = &quot;plasma&quot;, trans = &quot;sqrt&quot;) + ggtitle(paste(&quot;Confirmed infections on&quot;, date)) Provided you have the latest version of R installed and the required packages were installed correctly, this will return the following: Using less than 50 lines of code, we now have a script that generates a world map colored by the number of infections on a particular day. 4.2.1 Exercises (easy) If you get stuck on any of the exercises, you can watch the video below to get unstuck. In case of installation problems, contact one of the supervisors or assistants, or work together with a student who has successfully installed the packages. Install the required packages and run the script to reproduce the figure. Look at the legend. What does 3e+07 mean? Read through the script. Can you change the figure to show the number of infections one month earlier? (Hint: Only one line in the code needs to be changed.) Delete , trans = \"sqrt\" from the script and run it again. What did this part do, and why would that be desirable? (You may restore the original script after this.) Delete the entire second to last line from the script. What did this line do? (You may restore the original script after this.) Essentially, ggplot works like this: ggplot(dataset) + whattoshow() + extraoption1() + extraoption2 + ... Add the following to the ggplot chain in the script: + coord_sf(xlim = c(-10, 35), ylim = c(35, 70)) Run the script again. What does this do? Can you change the xlim and ylim values from the previous question to center the map around Africa? Go to the github page for the viridis package. What is the point of this package? Can you change the ggplot part of our script to use a different color scheme? (Hint: We are already using one of the viridis color schemes, so you only have to change something, not add anything new.) If you click on Earth in the environment pane, or if you run View(Earth) in the console, you can see all the variables stored in the Earth data set. Can you change the original script to show the population estimates instead of the number of infections? [video explaining the entire script to be included] 4.2.2 Extra: Data Cleaning (*) If you have time left, you can try and complete the additional exercises here. The COVID-19 and Earth data sets use different names for countries. So how did I know what names to replace with what? You could simply print both lists of countries and manually look for names that are written differently in both data sets: # Country names in the Earth data set Earth$admin # Country names in the COVID-19 data set countries But these commands will return lists of over 200 countries A much easier way is to simply look at which countries were unavailable after the matching step. For example: countries &lt;- Cases$administrative_area_level_1 wh &lt;- match(Earth$admin, countries) Earth$admin[is.na(wh)] ## [1] &quot;Aruba&quot; ## [2] &quot;Anguilla&quot; ## [3] &quot;Aland&quot; ## ... (49 countries omitted for brevity) ## [53] &quot;United States of America&quot; ## [54] &quot;Vatican&quot; ## [55] &quot;British Virgin Islands&quot; ## [56] &quot;United States Virgin Islands&quot; ## [57] &quot;Wallis and Futuna&quot; This gives us a list of only the countries in the Earth data set that were not matched. Here we see that, for instance, \"United States of America\" was not matched to the COVID-19 data, even though we know there were large number of cases in the US. The next step is to see how this country is called in the other data set. Again, you could just look at all the names in the variable countries, but how about we only check countries which name contains a capital letter U: # Countries in the COVID-19 data set with a capital letter U countries[grep(&quot;U&quot;, countries)] ## [1] &quot;United Arab Emirates&quot; &quot;United Kingdom&quot; ## [3] &quot;Uganda&quot; &quot;Ukraine&quot; ## [5] &quot;Uruguay&quot; &quot;United States of America&quot; ## [7] &quot;Uzbekistan&quot; &quot;Virgin Islands, U.S.&quot; # Countries in the Earth data set with a capital letter U Earth$admin[grep(&quot;U&quot;, Earth$admin)] ## [1] &quot;United Arab Emirates&quot; &quot;United Kingdom&quot; ## [3] &quot;United Republic of Tanzania&quot; &quot;Uganda&quot; ## [5] &quot;Ukraine&quot; &quot;Uruguay&quot; ## [7] &quot;United States of America&quot; &quot;Uzbekistan&quot; ## [9] &quot;United States Virgin Islands&quot; Here we see the problem: In the COVID-19 data set, the US is called \"United States\", whereas in the Earth data set it is called \"United States of America\". (In the original script, I already changed this for the United States, South Korea and the Ivory Coast.) The solution is to overwrite the name so they are both the same: countries[countries == &quot;United States&quot;] &lt;- &quot;United States of America&quot; And like that, you can check all the unmatched countries for perhaps other names they might be known by. Here is another example: # Countries containing &quot;Congo&quot; in the COVID-19 data set countries[grep(&quot;Congo&quot;, countries)] ## [1] &quot;Congo, the Democratic Republic of the&quot; ## [2] &quot;Congo&quot; # Countries containing &quot;Congo&quot; in the Earth data set Earth$admin[grep(&quot;Congo&quot;, Earth$admin)] ## [1] &quot;Democratic Republic of the Congo&quot; &quot;Republic of Congo&quot; 4.3 Exercise (medium) As you can see above, the two Congos have different names in either data set. Read the original script carefully. Add what you think is necessary to color the two Congos as well. To see if it works, simply run the script again to produce the (new) figure. Using the method described above, can you color any other countries which are now grey? (Hint: Some countries do not have any data on confirmed cases, like Turkmenistan and North Korea. You can leave these uncolored.) 4.3.1 Exercise (hard) Adjust the script to draw the number of coronavirus cases on a given day, relative to the population size of each country, and then adjust the plot to zoom in on the continent of Asia. (There is already a variable somewhere that contains the required information.) "]]
